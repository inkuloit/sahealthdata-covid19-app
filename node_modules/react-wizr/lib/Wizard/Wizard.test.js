"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _enzyme = require("enzyme");

var _Wizard = _interopRequireDefault(require("./Wizard"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Steps = function Steps(_ref) {
  var children = _ref.children;
  return children;
};

Steps.defaultProps = {
  isSteps: true
};

var Step = function Step(_ref2, context) {
  var children = _ref2.children;

  if (typeof children === 'function') {
    return children(context);
  }

  return children;
};

Step.defaultProps = {
  isStep: true
};
Step.contextTypes = {
  activeStepIndex: _propTypes["default"].number.isRequired,
  goToNextStep: _propTypes["default"].func.isRequired,
  goToPrevStep: _propTypes["default"].func.isRequired,
  goToStep: _propTypes["default"].func.isRequired,
  totalSteps: _propTypes["default"].number.isRequired
};
describe('Wizard', function () {
  describe('with no props', function () {
    var wrapper;
    var activeStepIndex;
    var goToNextStep;
    var goToPrevStep;
    var goToStep;
    var totalSteps;
    var onStepChanged = jest.fn();
    var onWizardFinished = jest.fn();
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_react["default"].createElement(_Wizard["default"], {
        onStepChanged: onStepChanged,
        onWizardFinished: onWizardFinished
      }, _react["default"].createElement(Steps, null, _react["default"].createElement(Step, {
        id: "first"
      }, function (_ref3) {
        var wizardActiveStepIndex = _ref3.activeStepIndex,
            wizardGoToNextStep = _ref3.goToNextStep,
            wizardGoToPrevStep = _ref3.goToPrevStep,
            wizardGoToStep = _ref3.goToStep,
            wizardTotalSteps = _ref3.totalSteps;
        activeStepIndex = wizardActiveStepIndex;
        goToNextStep = wizardGoToNextStep;
        goToPrevStep = wizardGoToPrevStep;
        goToStep = wizardGoToStep;
        totalSteps = wizardTotalSteps;
        return null;
      }), _react["default"].createElement(Step, {
        id: "second"
      }, "2"))));
    });
    var firstStep;
    var secondStep;
    var lastStep;
    var goToLastStep;
    beforeEach(function () {
      firstStep = 0;
      secondStep = 1;
      lastStep = secondStep;

      goToLastStep = function goToLastStep() {
        return goToStep(lastStep);
      };

      onStepChanged.mockReset();
      onWizardFinished.mockReset();
    });
    it('renders its steps', function () {
      expect(wrapper.contains(Steps)).toBe(true);
    });
    it('returns the number of steps', function () {
      expect(totalSteps).toBe(2);
    });
    it('starts at first step', function () {
      expect(activeStepIndex).toBe(firstStep);
    });
    it('moves to given step', function () {
      goToStep(firstStep);
      expect(activeStepIndex).toBe(firstStep);
    });
    it('moves to next step', function () {
      goToStep(firstStep);
      goToNextStep();
      expect(activeStepIndex).toBe(secondStep);
    });
    it('does not move to next step when in the last step', function () {
      goToLastStep();
      goToNextStep();
      expect(activeStepIndex).toBe(lastStep);
    });
    it('executes onFinishWizard callback when trying to navigate to last step', function () {
      goToLastStep();
      goToNextStep();
      expect(onWizardFinished).toHaveBeenCalled();
    });
    it('moves back to prev step', function () {
      goToStep(secondStep);
      goToPrevStep();
      expect(activeStepIndex).toBe(firstStep);
    });
    it('does not move to prev step when in the first step', function () {
      goToStep(firstStep);
      goToPrevStep();
      expect(activeStepIndex).toBe(firstStep);
    });
    it('executes a callback when moving through steps', function () {
      goToNextStep();
      expect(onStepChanged).toBeCalledWith({
        activeStepIndex: 1,
        step: {
          id: 'second'
        }
      });
    });
  });
  describe('passing defaultActiveStepIndex prop', function () {
    it('starts at given step', function () {
      var activeStepIndex;
      (0, _enzyme.mount)(_react["default"].createElement(_Wizard["default"], {
        defaultActiveStepIndex: 1
      }, _react["default"].createElement(Steps, null, _react["default"].createElement(Step, {
        id: "first"
      }, "1"), _react["default"].createElement(Step, {
        id: "second"
      }, function (_ref4) {
        var wizardActiveStepIndex = _ref4.activeStepIndex;
        activeStepIndex = wizardActiveStepIndex;
        return null;
      }))));
      expect(activeStepIndex).toBe(1);
    });
  });
  describe('passing activeStepIndex prop', function () {
    it('keeps the state in the component rendering the wizard,', function () {
      var ControlledWizard =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(ControlledWizard, _React$Component);

        function ControlledWizard() {
          var _getPrototypeOf2;

          var _this;

          _classCallCheck(this, ControlledWizard);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlledWizard)).call.apply(_getPrototypeOf2, [this].concat(args)));

          _defineProperty(_assertThisInitialized(_this), "state", {
            activeStepIndex: 0
          });

          return _this;
        }

        _createClass(ControlledWizard, [{
          key: "render",
          value: function render() {
            var _this2 = this;

            return _react["default"].createElement(_Wizard["default"], {
              activeStepIndex: this.state.activeStepIndex,
              onStepChanged: function onStepChanged(_ref5) {
                var activeStepIndex = _ref5.activeStepIndex;
                return _this2.setState({
                  activeStepIndex: activeStepIndex
                });
              }
            }, _react["default"].createElement(Steps, null, _react["default"].createElement(Step, {
              id: "first"
            }, function (_ref6) {
              var goToNextStep = _ref6.goToNextStep;
              return _react["default"].createElement("button", {
                onClick: goToNextStep
              }, "Go to next step");
            }), _react["default"].createElement(Step, {
              id: "second"
            }, "2")));
          }
        }]);

        return ControlledWizard;
      }(_react["default"].Component);

      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(ControlledWizard, null));
      wrapper.find('button').simulate('click');
      expect(wrapper.state().activeStepIndex).toBe(1);
    });
  });
  describe('passing history prop', function () {
    it('appends the current step id in the URL', function () {
      var push = jest.fn();
      var replace = jest.fn();
      var history = {
        listen: function listen() {},
        push: push,
        replace: replace
      };
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_Wizard["default"], {
        history: history,
        baseUrl: "/steps"
      }, _react["default"].createElement(Steps, null, _react["default"].createElement(Step, {
        id: "first"
      }, function (_ref7) {
        var goToNextStep = _ref7.goToNextStep;
        return _react["default"].createElement("button", {
          onClick: goToNextStep
        }, "Go to next step");
      }), _react["default"].createElement(Step, {
        id: "second"
      }, "2"))));
      expect(replace).toHaveBeenCalledWith('/steps/first');
      wrapper.find('button').simulate('click');
      expect(push).toHaveBeenCalledWith('/steps/second');
    });
    describe('with conditional step', function () {
      it('ignores the step', function () {
        var push = jest.fn();
        var replace = jest.fn();
        var history = {
          listen: function listen() {},
          push: push,
          replace: replace
        };
        (0, _enzyme.mount)(_react["default"].createElement(_Wizard["default"], {
          history: history,
          baseUrl: "/steps"
        }, _react["default"].createElement(Steps, null, false && _react["default"].createElement(Step, {
          id: "first"
        }, "1"), _react["default"].createElement(Step, {
          id: "second"
        }, "2"))));
        expect(replace).not.toHaveBeenCalledWith('/steps/first');
        expect(replace).toHaveBeenCalledWith('/steps/second');
      });
    });
    describe('with new props', function () {
      var component = (0, _enzyme.shallow)(_react["default"].createElement(_Wizard["default"], null, _react["default"].createElement(Steps, null)));
      it('sets new steps', function () {
        var spy = jest.spyOn(_Wizard["default"].prototype, 'setSteps');
        component.setProps({
          children: _react["default"].createElement(Steps, null)
        });
        expect(spy).toHaveBeenCalledTimes(1);
        spy.mockRestore();
      });
      it('does not set new steps when children are not updated', function () {
        var spy = jest.spyOn(_Wizard["default"].prototype, 'setSteps');
        component.setProps({
          aProp: 'prop'
        });
        expect(spy).not.toHaveBeenCalled();
        spy.mockRestore();
      });
    });
  });
});