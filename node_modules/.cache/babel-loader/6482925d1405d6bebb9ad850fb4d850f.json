{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nimport { Session } from 'bc-react-session';\nimport { browserName, osName, osVersion } from 'react-device-detect';\nconst session = Session.getSession();\nlet headers = {};\n\nif (session.isValid) {\n  headers = {\n    'Authorization': `Bearer ${session.payload.token}`\n  };\n}\n\nclass AuthProvider {\n  static async login(user, password, geoLocation) {\n    const device = {\n      browser: browserName,\n      os_name: osName,\n      os_version: osVersion\n    };\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/login`,\n      data: {\n        user,\n        password,\n        device,\n        geoinfo: geoLocation\n      }\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async verifyPin(pincode) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/pin/verify`,\n      data: {\n        pincode\n      },\n      crossdomain: true,\n      headers\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async mobileVerifyResend(mobile) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/mobile/verify/resend`,\n      data: {\n        mobile\n      }\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async mobileVerify(token, otp) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/mobile/verify`,\n      crossdomain: true,\n      data: {\n        token,\n        otp\n      }\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async emailVerifyResend(email) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/email/verify/resend`,\n      data: {\n        email\n      }\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async emailVerify(key) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/email/verify`,\n      crossdomain: true,\n      data: {\n        key\n      }\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async register(data) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/register`,\n      data\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async tokens(id) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      headers: {},\n      url: `${config.api.baseurl}auth/tokens`\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async changePassword(old_password, new_password1, new_password2) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/password/change`,\n      data: {\n        old_password,\n        new_password1,\n        new_password2\n      },\n      crossdomain: true,\n      headers\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async verifyPassword(password) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/password/verify`,\n      data: {\n        password\n      },\n      crossdomain: true,\n      headers\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async logout() {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/logout`,\n      crossdomain: true,\n      headers\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n  static async resetPassword(user) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/password/reset`,\n      data: {\n        email: user,\n        mobile: user\n      },\n      crossdomain: true\n    }).then(json => json.data).then(res => {\n      return res;\n    });\n  }\n\n}\n\nexport default AuthProvider;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/humpalumpa/inkuloit/healthdata.co.za/app/src/providers/AuthProvider.js"],"names":["axios","config","Session","browserName","osName","osVersion","session","getSession","headers","isValid","payload","token","AuthProvider","login","user","password","geoLocation","device","browser","os_name","os_version","mode","method","url","api","baseurl","data","geoinfo","then","json","res","verifyPin","pincode","crossdomain","mobileVerifyResend","mobile","mobileVerify","otp","emailVerifyResend","email","emailVerify","key","register","tokens","id","changePassword","old_password","new_password1","new_password2","verifyPassword","logout","resetPassword"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport config from '../config';\nimport { Session } from 'bc-react-session';\nimport { browserName, osName, osVersion } from 'react-device-detect';\n\nconst session = Session.getSession();\nlet headers = {};\n\nif (session.isValid) {\n  headers = {\n    'Authorization': `Bearer ${session.payload.token}`,\n  }\n}\n\nclass AuthProvider {\n  static async login(user, password, geoLocation) {\n    const device = {\n      browser: browserName,\n      os_name: osName,\n      os_version: osVersion,\n    };\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/login`,\n      data: { user, password, device, geoinfo: geoLocation },\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async verifyPin(pincode) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/pin/verify`,\n      data: { pincode },\n      crossdomain: true,\n      headers,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async mobileVerifyResend(mobile) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/mobile/verify/resend`,\n      data: { mobile },\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async mobileVerify(token, otp) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/mobile/verify`,\n      crossdomain: true,\n      data: { token, otp },\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async emailVerifyResend(email) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/email/verify/resend`,\n      data: { email },\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async emailVerify(key) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/email/verify`,\n      crossdomain: true,\n      data: { key },\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async register(data) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/register`,\n      data,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async tokens(id) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      headers: {},\n      url: `${config.api.baseurl}auth/tokens`,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async changePassword(old_password, new_password1, new_password2) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/password/change`,\n      data: { old_password, new_password1, new_password2 },\n      crossdomain: true,\n      headers,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async verifyPassword(password) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/password/verify`,\n      data: { password },\n      crossdomain: true,\n      headers,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async logout() {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/logout`,\n      crossdomain: true,\n      headers,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n\n  static async resetPassword(user) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'POST',\n      url: `${config.api.baseurl}auth/password/reset`,\n      data: { email: user, mobile: user },\n      crossdomain: true,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res;\n    });\n  }\n}\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}