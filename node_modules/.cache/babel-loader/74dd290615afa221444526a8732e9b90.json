{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nimport { Session } from 'bc-react-session';\nconst session = Session.getSession();\nlet headers = {};\n\nif (session.isValid) {\n  headers = {\n    'Authorization': `Bearer ${session.payload.token}`,\n    'Content-Type': 'application/json'\n  };\n}\n\nclass CountriesProvider {\n  static async get(id) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      url: `${config.api.baseurl}countries/${id}`,\n      crossdomain: true,\n      headers\n    }).then(json => json.data).then(res => {\n      return res.data;\n    });\n  }\n\n  static async getAll() {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      url: `${config.api.baseurl}countries`,\n      crossdomain: true,\n      headers\n    }).then(res => {\n      return res.data.results;\n    });\n  }\n\n  static async getProvinces(id) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      url: `${config.api.baseurl}countries/${id}/provinces`,\n      crossdomain: true,\n      headers\n    }).then(json => json.data).then(res => {\n      return res.data.results;\n    });\n  }\n\n}\n\nexport default CountriesProvider;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/humpalumpa/inkuloit/healthdata.co.za/app/src/providers/CountriesProvider.js"],"names":["axios","config","Session","session","getSession","headers","isValid","payload","token","CountriesProvider","get","id","mode","method","url","api","baseurl","crossdomain","then","json","data","res","getAll","results","getProvinces"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAACE,UAAR,EAAhB;AACA,IAAIC,OAAO,GAAG,EAAd;;AAEA,IAAIF,OAAO,CAACG,OAAZ,EAAqB;AACnBD,EAAAA,OAAO,GAAG;AACR,qBAAkB,UAASF,OAAO,CAACI,OAAR,CAAgBC,KAAM,EADzC;AAER,oBAAgB;AAFR,GAAV;AAID;;AAED,MAAMC,iBAAN,CAAwB;AACtB,eAAaC,GAAb,CAAiBC,EAAjB,EAAqB;AACnB,WAAO,MAAMX,KAAK,CAAC;AACjBY,MAAAA,IAAI,EAAE,SADW;AAEjBC,MAAAA,MAAM,EAAE,KAFS;AAGjBC,MAAAA,GAAG,EAAG,GAAEb,MAAM,CAACc,GAAP,CAAWC,OAAQ,aAAYL,EAAG,EAHzB;AAIjBM,MAAAA,WAAW,EAAE,IAJI;AAKjBZ,MAAAA;AALiB,KAAD,CAAL,CAOZa,IAPY,CAONC,IAAD,IAAUA,IAAI,CAACC,IAPR,EAQZF,IARY,CAQNG,GAAD,IAAS;AACb,aAAOA,GAAG,CAACD,IAAX;AACD,KAVY,CAAb;AAWD;;AAED,eAAaE,MAAb,GAAsB;AACpB,WAAO,MAAMtB,KAAK,CAAC;AACjBY,MAAAA,IAAI,EAAE,SADW;AAEjBC,MAAAA,MAAM,EAAE,KAFS;AAGjBC,MAAAA,GAAG,EAAG,GAAEb,MAAM,CAACc,GAAP,CAAWC,OAAQ,WAHV;AAIjBC,MAAAA,WAAW,EAAE,IAJI;AAKjBZ,MAAAA;AALiB,KAAD,CAAL,CAOZa,IAPY,CAONG,GAAD,IAAS;AACb,aAAOA,GAAG,CAACD,IAAJ,CAASG,OAAhB;AACD,KATY,CAAb;AAUD;;AAED,eAAaC,YAAb,CAA0Bb,EAA1B,EAA8B;AAC5B,WAAO,MAAMX,KAAK,CAAC;AACjBY,MAAAA,IAAI,EAAE,SADW;AAEjBC,MAAAA,MAAM,EAAE,KAFS;AAGjBC,MAAAA,GAAG,EAAG,GAAEb,MAAM,CAACc,GAAP,CAAWC,OAAQ,aAAYL,EAAG,YAHzB;AAIjBM,MAAAA,WAAW,EAAE,IAJI;AAKjBZ,MAAAA;AALiB,KAAD,CAAL,CAOZa,IAPY,CAONC,IAAD,IAAUA,IAAI,CAACC,IAPR,EAQZF,IARY,CAQNG,GAAD,IAAS;AACb,aAAOA,GAAG,CAACD,IAAJ,CAASG,OAAhB;AACD,KAVY,CAAb;AAWD;;AAxCqB;;AA2CxB,eAAed,iBAAf","sourcesContent":["import axios from 'axios';\nimport config from '../config';\nimport { Session } from 'bc-react-session';\n\nconst session = Session.getSession();\nlet headers = {};\n\nif (session.isValid) {\n  headers = {\n    'Authorization': `Bearer ${session.payload.token}`,\n    'Content-Type': 'application/json',\n  }\n}\n\nclass CountriesProvider {\n  static async get(id) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      url: `${config.api.baseurl}countries/${id}`,\n      crossdomain: true,\n      headers,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res.data;\n    });\n  }\n\n  static async getAll() {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      url: `${config.api.baseurl}countries`,\n      crossdomain: true,\n      headers,\n    })\n    .then((res) => {\n      return res.data.results;\n    });\n  }\n\n  static async getProvinces(id) {\n    return await axios({\n      mode: 'no-cors',\n      method: 'GET',\n      url: `${config.api.baseurl}countries/${id}/provinces`,\n      crossdomain: true,\n      headers,\n    })\n    .then((json) => json.data)\n    .then((res) => {\n      return res.data.results;\n    });\n  }\n}\n\nexport default CountriesProvider;\n"]},"metadata":{},"sourceType":"module"}